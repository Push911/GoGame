@startuml

title __GOBAN's Class Diagram__\n

  namespace gameLogic {
    namespace goban {
      class gameLogic.goban.Field {
          - x : int
          {static} - xDirections : int[]
          - y : int
          {static} - yDirections : int[]
          + Field()
          + checkLiberties()
          + equals()
          + getNeighbours()
          + getX()
          + getY()
          + setEmpty()
          ~ getType()
          ~ setType()
      }
    }
  }
  

  namespace gameLogic {
    namespace goban {
      enum FieldType {
        BLACK
        EMPTY
        WHITE
      }
    }
  }
  

  namespace gameLogic {
    namespace goban {
      class gameLogic.goban.Goban {
          - blackCaptured : int
          - blackTerritory : int
          - goban : Field[][]
          - size : int
          - whiteCaptured : int
          - whiteTerritory : int
          + Goban()
          + checkIfMovePossible()
          + getBlackCaptured()
          + getBlackTerritory()
          + getField()
          + getFieldType()
          + getWhiteCaptured()
          + getWhiteTerritory()
          + putStone()
          + removeStones()
          + setTerritories()
          + update()
          - isOnGoban()
          - updateStatistics()
      }
    }
  }
  

  namespace gameLogic {
    namespace goban {
      interface gameLogic.goban.GobanUpdater {
          {abstract} + checkLiberties()
          {abstract} + setEmpty()
      }
    }
  }
  

  namespace gameLogic {
    namespace goban {
      enum MoveState {
        CONFIRMED
        KO
        OCCUPIEDFIELD
        SUICIDMOVE
      }
    }
  }
  

  namespace gameLogic {
    namespace goban {
      class gameLogic.goban.StoneGroup {
          - group : Set<Field>
          + StoneGroup()
          + checkLiberties()
          + setEmpty()
          ~ add()
          ~ contains()
          ~ getFields()
      }
    }
  }
  

  namespace gameLogic {
    namespace goban {
      class gameLogic.goban.StoneGroupSet {
          - StoneGroups : Set<StoneGroup>
          + StoneGroupSet()
          + checkForKo()
          + checkIfSuicidal()
          + updateGroupsAfterMove()
          - addFieldToGroup()
          - createNewGroup()
          - findGroupByStone()
          - handleConsequences()
          - joinGroups()
      }
    }
  }
  

  gameLogic.goban.Field .up.|> gameLogic.goban.GobanUpdater
  gameLogic.goban.Field o-- gameLogic.goban.Goban : goban
  gameLogic.goban.Field o-- gameLogic.goban.FieldType : type
  gameLogic.goban.Goban o-- gameLogic.goban.StoneGroupSet : StoneGroups
  gameLogic.goban.Goban o-- gameLogic.goban.Field : lastCaptured
  gameLogic.goban.Goban o-- gameLogic.goban.Field : lastMove
  gameLogic.goban.StoneGroup .up.|> gameLogic.goban.GobanUpdater


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
