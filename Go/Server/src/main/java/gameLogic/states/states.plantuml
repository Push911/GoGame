@startuml

title __STATES's Class Diagram__\n

  namespace gameLogic {
    namespace states {
      interface gameLogic.states.GameControllerState {
          {abstract} + makeMove()
          {abstract} + makeMove()
          {abstract} + reachAgreement()
          {abstract} + sendProposal()
      }
    }
  }
  

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateBMarkDead {
          + GameControllerStateBMarkDead()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }
  

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateBMove {
          + GameControllerStateBMove()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }
  

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateBSuggestTerritory {
          + GameControllerStateBSuggestTerritory()
          + makeMove()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }
  

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateEndGame {
          + makeMove()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }
  

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateWMarkDead {
          + GameControllerStateWMarkDead()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }
  

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateWSuggestTerritory {
          + GameControllerStateWSuggestTerritory()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }

  namespace gameLogic {
    namespace states {
      class gameLogic.states.GameControllerStateWMove {
          + GameControllerStateWMove()
          + makeMove()
          + makeMove()
          + reachAgreement()
          + sendProposal()
      }
    }
  }
  

  

  gameLogic.states.GameControllerStateBMarkDead .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateBMarkDead o-- gameLogic.GameController : gameController
  gameLogic.states.GameControllerStateBMove .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateBMove o-- gameLogic.GameController : gameController
  gameLogic.states.GameControllerStateBSuggestTerritory .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateBSuggestTerritory o-- gameLogic.GameController : gameController
  gameLogic.states.GameControllerStateEndGame .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateWMarkDead .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateWMarkDead o-- gameLogic.GameController : gameController
  gameLogic.states.GameControllerStateWMove .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateWMove o-- gameLogic.GameController : gameController
  gameLogic.states.GameControllerStateWSuggestTerritory .up.|> gameLogic.states.GameControllerState
  gameLogic.states.GameControllerStateWSuggestTerritory o-- gameLogic.GameController : gameController




@enduml
